library(htmlwidgets)
# create df with columns <filename> and <tag>:
lat  <- c(52, 53)
lon      <- c(8.89,9.1)
name <- c("pointing North", "Pointing East")
angle <- c(0,90)
value <- c(1,2)
df <- data.frame(name, angle, value, lat,lon)
bins <- c(0,1,2,Inf)
# Add leaflet map:
m <- leaflet() %>%
addProviderTiles(providers$Esri.WorldTopoMap)
m <- RotatedMarker.layer(m, df, "unit", "default-layer", bins)
m
### Add RotatedMarker to leaflet map:
library(Waternet)
library(leaflet)
library(htmltools)
library(htmlwidgets)
# create df with columns <filename> and <tag>:
lat  <- c(52, 53)
lon      <- c(8.89,9.1)
name <- c("pointing North", "Pointing East")
angle <- c(0,90)
value <- c(1,2)
df <- data.frame(name, angle, value, lat,lon)
bins <- c(0,1,2,Inf)
# Add leaflet map:
m <- leaflet() %>%
addProviderTiles(providers$Esri.WorldTopoMap)
m <- RotatedMarker.layer(m, df, "unit", "default-layer", bins)
m
# create df with columns <filename> and <tag>:
lat  <- c(52, 53)
lon      <- c(4.89,5.1)
name <- c("pointing North", "Pointing East")
angle <- c(0,90)
value <- c(1,2)
df <- data.frame(name, angle, value, lat,lon)
bins <- c(0,1,2,Inf)
# Add leaflet map:
m <- leaflet() %>%
addProviderTiles(providers$Esri.WorldTopoMap)
m <- RotatedMarker.layer(m, df, "unit", "default-layer", bins)
m
library(Waternet)
library(leaflet)
library(htmltools)
library(htmlwidgets)
# create df with columns <filename> and <tag>:
lat  <- c(52, 53)
lon      <- c(4.89,5.1)
name <- c("pointing North", "Pointing East")
angle <- c(0,90)
value <- c(1,2)
df <- data.frame(name, angle, value, lat,lon)
bins <- c(0,1,2,Inf)
# Add leaflet map:
m <- leaflet() %>%
addProviderTiles(providers$Esri.WorldTopoMap)
m <- RotatedMarker.layer(m, df, "unit", "default-layer", bins)
m
library(Waternet)
library(leaflet)
library(htmltools)
library(htmlwidgets)
# create df with columns <filename> and <tag>:
lat  <- c(52, 53)
lon      <- c(4.89,5.1)
name <- c("pointing North", "Pointing East")
angle <- c(0,90)
value <- c(1,2)
df <- data.frame(name, angle, value, lat,lon)
bins <- c(0,1,2,Inf)
# Add leaflet map:
m <- leaflet() %>%
addProviderTiles(providers$Esri.WorldTopoMap)
m <- RotatedMarker.layer(m, df, "unit", "default-layer", bins)
m
library(Waternet)
library(leaflet)
library(htmltools)
library(htmlwidgets)
# create df with columns <filename> and <tag>:
lat  <- c(52, 53)
lon      <- c(4.89,5.1)
name <- c("pointing North", "Pointing East")
angle <- c(0,90)
value <- c(1,2)
df <- data.frame(name, angle, value, lat,lon)
bins <- c(0,1,2,Inf)
# Add leaflet map:
m <- leaflet() %>%
addProviderTiles(providers$Esri.WorldTopoMap)
m <- RotatedMarker.layer(m, df, "unit", "pietje", bins)
m
m <- leaflet() %>%
addProviderTiles(providers$Esri.WorldTopoMap)
m <- RotatedMarker.layer(m, df, "m3/uur", "pietje", bins)
m
library(Waternet)
arr <- sobek2arr(filename = "DATA/testdata.his")
submod <- c("OXY", "Cl")
locmod <- c("LOX003","LOX009")
df <- arr2df(arr, locmod=locmod, submod=submod)
library(ggplot2)
plot <- ggplot(df, aes(time, value)) +
geom_line(aes(color = variable), size = 1) +
facet_grid((variable ~ location), scales = "free")
plot
library(Waternet)
submod <- c("OXY")
locmod <- c("LOX010")
df <- get_model_data("DATA/testdata.his", locmod, submod)
df.cum <- cum_values(df, debug=T)
library(ggplot2)
plot <- ggplot(df.cum, aes(time, value.cum)) +
geom_line(aes(color = variable), size = 1) +
facet_grid((variable ~ location), scales = "free")
plot
library(Waternet)
submod <- c("OXY")
locmod <- c("LOX010")
df <- get_model_data("DATA/testdata.his", locmod, submod)
df.cum <- cum_values(df, debug=T)
library(ggplot2)
plot <- ggplot(df.cum, aes(time, value.cum)) +
geom_line(aes(color = variable), size = 1) +
facet_grid((variable ~ location), scales = "free")
plot
library(Waternet)
### Get data, make cum value plot:
library(Waternet)
submod <- c("OXY")
locmod <- c("LOX010")
df <- get_model_data("DATA/testdata.his", locmod, submod)
df.cum <- cum_values(df, debug=T)
df$time[1]
year(df$time[1])
df.cum <- cum_values(df, debug=T)
df.cum <- cum_values(df, debug=T)
library(Waternet)
submod <- c("OXY")
locmod <- c("LOX010")
df <- get_model_data("DATA/testdata.his", locmod, submod)
df.cum <- cum_values(df, debug=T)
library(ggplot2)
plot <- ggplot(df.cum, aes(time, value.cum)) +
geom_line(aes(color = variable), size = 1) +
facet_grid((variable ~ location), scales = "free")
plot
library(Waternet)
library(Waternet)
submod <- c("OXY")
locmod <- c("LOX010")
df <- get_model_data("DATA/testdata.his", locmod, submod)
df.cum <- cum_values(df, debug=T)
### Get data, make cum value plot:
library(Waternet)
library(Waternet)
submod <- c("OXY")
locmod <- c("LOX010")
df <- get_model_data("DATA/testdata.his", locmod, submod)
df.cum <- cum_values(df, debug=T)
library(ggplot2)
plot <- ggplot(df.cum, aes(time, value.cum)) +
geom_line(aes(color = variable), size = 1) +
facet_grid((variable ~ location), scales = "free")
plot
library(Waternet)
submod <- c("OXY")
locmod <- c("LOX010")
df <- get_model_data("DATA/testdata.his", locmod, submod)
df.cum <- cum_values(df, debug=F)
library(ggplot2)
plot <- ggplot(df.cum, aes(time, value.cum)) +
geom_line(aes(color = variable), size = 1) +
facet_grid((variable ~ location), scales = "free")
plot
library(Waternet)
library(devtools)
install_github("EMMeijers/Waternet")
library(devtools)
install_github("EMMeijers/Waternet")
library(Waternet)
library(leaflet)
library(htmltools)
library(htmlwidgets)
# create df with columns <filename> and <tag>:
lat  <- c(52, 53)
lon      <- c(4.89,5.1)
name <- c("pointing North", "Pointing East")
angle <- c(0,90)
value <- c(1,2)
df <- data.frame(name, angle, value, lat,lon)
bins <- c(0,1,2,Inf)
# Add leaflet map:
m <- leaflet() %>%
addProviderTiles(providers$Esri.WorldTopoMap)
m <- RotatedMarker.layer(m, df, "m3/uur", "pietje", bins)
m
library(leaflet)
library(htmltools)
library(htmlwidgets)
# create df with columns <filename> and <tag>:
lat  <- c(52, 53)
lon      <- c(4.89,5.1)
name <- c("pointing North", "Pointing East")
angle <- c(0,90)
value <- c(1,2)
df <- data.frame(name, angle, value, lat,lon)
bins <- c(0,1,2,Inf)
# Add leaflet map:
m <- leaflet() %>%
addProviderTiles(providers$Esri.WorldTopoMap)
m <- RotatedMarker.layer(m, df, "m3/uur", "pietje", bins)
m
library(Waternet)
library(Waternet)
df <- parse_DELWAQ_monitor_file("c:/rundir/flows/B12_huidig_1214/monitor.dat")
library(Waternet)
df <- parse_DELWAQ_monitor_file("c:/rundir/flows/B12_huidig_1214/monitor.dat")
df
head(df)
library(Waternet)
library(devtools)
install_github("wstolte/DelwaqR")
library(Waternet)
library(Waternet)
library(Waternet)
library(Waternet)
library(Waternet)
library(Waternet)
library(Waternet)
library(Waternet)
library(Waternet)
arr <- sobek2arr(filename = "DATA/testdata.his")
submod <- c("OXY", "Cl")
locmod <- c("LOX003","LOX009")
df <- arr2df(arr, locmod=locmod, submod=submod)
library(ggplot2)
plot <- ggplot(df, aes(time, value)) +
geom_line(aes(color = variable), size = 1) +
facet_grid((variable ~ location), scales = "free")
plot
### Get vars, locations
get_data_locs(arr)
get_data_vars(arr)
arr <- sobek2arr(filename = "DATA/testdata.his")
### Get vars, locations
get_data_locs(arr)
tmp <- get_data_locs(arr)
tmp
library(Waternet)
library(Waternet)
locs <- get_his_locs("DATA/testdata.his")
locs
library(Waternet)
locs <- get_his_locs("DATA/testdata.his")
locs
data <- sobek2arr("DATA/testdata.his")
data <- sobek2arr("DATA/testdata.his")
library(Waternet)
locs <- get_his_locs("DATA/testdata.his")
locs
library(Waternet)
library(Waternet)
locs <- get_his_locs("DATA/testdata.his")
vars <- get_his_vars("DATA/testdata.his")
vars
library(Waternet)
2.88*3600
??melt()
library(Waternet)
library(Waternet)
library(Waternet)
library(Waternet)
tmp <- OpenHISFile("DATA/testdata.his")
View(tmp)
tmp$T0
tmp$Header
library(Waternet)
library(Waternet)
tmp <- OpenHISFile("DATA/testdata.his")
library(Waternet)
tmp <- OpenHISFile("DATA/testdata.his")
tmp$Header
library(Waternet)
tmp <- OpenHISFile("DATA/testdata.his")
tmp$Header
tmp$T0
library(Waternet)
tmp <- OpenHISFile("DATA/testdata.his")
tmp$Header
tmp$T0
tmp$TUnit
tmp$TStep
tmp$NTimes*7*86400
library(Waternet)
library(Waternet)
library(Waternet)
library(Waternet)
library(Waternet)
library(Waternet)
devtools::load_all(".")
library(Waternet)
library(Waternet)
library(devtools)
install_github("EMMeijers/Waternet", upgrade = FALSE))
install_github("EMMeijers/Waternet", upgrade = FALSE)
library(Waternet)
library(Waternet)
library(Waternet)
library(Waternet)
library(Waternet)
library(Waternet)
library(Waternet)
library(Waternet)
library(Waternet)
library(Waternet)
library(Waternet)
library(Waternet)
library(Waternet)
library(Waternet)
library(Waternet)
library(Waternet)
library(Waternet)
library(Waternet)
library(Waternet)
library(Waternet)
library(Waternet)
library(Waternet)
rm(list=ls())
library(Waternet)
library(dplyr)
library(readxl)
library(lubridate)
library(tidyr)
########## FUNCTIONS:
merge_bal_periods <- function(df.bal, df.periods) {
# Add month, year and day labels:
df.periods <- df.periods %>%
mutate(y_merge = year(delwaq_time),
m_merge = month(delwaq_time),
d_merge = day(delwaq_time))
df.bal <- df.bal %>%
mutate(y_merge = year(time),
m_merge = month(time),
d_merge = day(time))
df <- left_join(df.bal, df.periods) %>%
select(-delwaq_time,-real_time,-y_merge, -m_merge,-d_merge) %>%
mutate(meteotype = as.integer(meteotype)) %>%
na.omit()
return(df)
}
merge_bal_terms <- function(df.bal, df.balterms) {
# Select columns in df.balterms:
df.balterms <- df.balterms %>%
select(variable, term, term_basis, stof, lokaal, transport, richting, type)
# Join columns on variable:
df <- left_join(df.bal, df.balterms)
return(df)
}
############### Start script
# Set output dir and scenario folder:
dir_output <- "c:/even/SGV2/"
scenario_name <- "Loads/"
# Filenames:
fn_balterms <- "c:/even/sgv/bal_posten.xlsx"
fn_periods <- "c:/OneDrive - Stichting Deltares/Documents/Projecten/Waternet_reposWnet_Boezemmodel/Postprocessing/demo_files/perioden2.xlsx"
fn_area <- "c:/even/sgv/opp_SWT.csv"
fn_scen  <- c("c:/even/sgv/Scenarios_SGV.csv")
fn_meetpunt_swt <- c("c:/even/sgv/mp_bbak_SGV.xlsx")
fn_wqmeas <- c("c:/even/sgv/Chlfa_SGVboezem.csv")
# Lees Perioden in:
periods <- read_excel(fn_periods)
# Lees Balans termen in:
balterms <- read_excel(fn_balterms, sheet = "Balterms_B10")
names(balterms) <- tolower(names(balterms))
submod <- unique(balterms$variable)
# Lees Oppervlakken in:
area <- read.table(fn_area, sep = ";", header = TRUE)
# Get locations:
locs <- c("SWT_KMS","SWT_NTV","SWT_NB","SWT_SGV_Z", "SWT_SGV_W")
# Lees scenarios:
scenarios <- read.table(fn_scen, sep = ";", header=TRUE)
##### Read model data, per scenario:
df.bal <- get_runs_data(scenarios, locs, submod)
# Merge balance data with periods, area's and balance terms:
df.bal <- merge_bal_periods(df.bal, periods)
df.bal <- left_join(df.bal, area)
df.bal <- merge_bal_terms(df.bal, balterms)
######## P belasting per bak
df.Pload <- loads_in_swt_meteotype(df.bal, f.subs=c("TotP"), f.meteotype = c(1,2,3,4))
write.table(df.Pload, paste(dir_output,scenario_name,"individueel_lozingen_P_meteotype.csv", sep = ""), row.names = FALSE, col.names = TRUE, sep = ";", quote = FALSE)
df.Pload.month <- loads_in_swt_month(df.bal, f.subs=c("TotP"))
write.table(df.Pload.month, paste(dir_output,scenario_name,"individueel_lozingen_P_maand.csv", sep = ""), row.names = FALSE, col.names = TRUE, sep = ";", quote = FALSE)
####### HRT per bak
# HRT Enkele bak
df.HRT.tabel <- hrt_swt_meteotype(df.bal,f.meteotype = c(1,2,3,4))
write.table(df.HRT.tabel, paste(dir_output,scenario_name,"individueel_HRT.csv", sep = ""), row.names = FALSE, col.names = TRUE, sep = ";", quote = FALSE)
df.HRT <- hrt_swt_month(df.bal,f.meteotype = c(1,2,3,4))
write.table(df.HRT, paste(dir_output,scenario_name,"individueel_HRT_maand.csv", sep = ""), row.names = FALSE, col.names = TRUE, sep = ";", quote = FALSE)
####### Meetpunt boezembak
map_locs_swt <- read_excel(fn_meetpunt_swt)
df.wq <- read.table(fn_wqmeas, header=T, sep=";")
# merge wq measurements, locs, periods:
head(df.wq)
head(df.Pload)
head(df.HRT)
rm(list=ls())
library(Waternet)
library(dplyr)
library(readxl)
library(lubridate)
library(tidyr)
########## FUNCTIONS:
merge_bal_periods <- function(df.bal, df.periods) {
# Add month, year and day labels:
df.periods <- df.periods %>%
mutate(y_merge = year(delwaq_time),
m_merge = month(delwaq_time),
d_merge = day(delwaq_time))
df.bal <- df.bal %>%
mutate(y_merge = year(time),
m_merge = month(time),
d_merge = day(time))
df <- left_join(df.bal, df.periods) %>%
select(-delwaq_time,-real_time,-y_merge, -m_merge,-d_merge) %>%
mutate(meteotype = as.integer(meteotype)) %>%
na.omit()
return(df)
}
merge_bal_terms <- function(df.bal, df.balterms) {
# Select columns in df.balterms:
df.balterms <- df.balterms %>%
select(variable, term, term_basis, stof, lokaal, transport, richting, type)
# Join columns on variable:
df <- left_join(df.bal, df.balterms)
return(df)
}
############### Start script
# Set output dir and scenario folder:
dir_output <- "c:/even/SGV2/"
scenario_name <- "Loads/"
# Filenames:
fn_balterms <- "c:/even/sgv/bal_posten.xlsx"
fn_periods <- "c:/OneDrive - Stichting Deltares/Documents/Projecten/Waternet_reposWnet_Boezemmodel/Postprocessing/demo_files/perioden2.xlsx"
fn_area <- "c:/even/sgv/opp_SWT.csv"
fn_scen  <- c("c:/even/sgv/Scenarios_SGV.csv")
fn_meetpunt_swt <- c("c:/even/sgv/mp_bbak_SGV.xlsx")
fn_wqmeas <- c("c:/even/sgv/Chlfa_SGVboezem.csv")
# Lees Perioden in:
periods <- read_excel(fn_periods)
# Lees Balans termen in:
balterms <- read_excel(fn_balterms, sheet = "Balterms_B10")
names(balterms) <- tolower(names(balterms))
submod <- unique(balterms$variable)
# Lees Oppervlakken in:
area <- read.table(fn_area, sep = ";", header = TRUE)
# Get locations:
locs <- c("SWT_KMS","SWT_NTV","SWT_NB","SWT_SGV_Z", "SWT_SGV_W")
# Lees scenarios:
scenarios <- read.table(fn_scen, sep = ";", header=TRUE)
##### Read model data, per scenario:
df.bal <- get_runs_data(scenarios, locs, submod)
# Merge balance data with periods, area's and balance terms:
df.bal <- merge_bal_periods(df.bal, periods)
df.bal <- left_join(df.bal, area)
df.bal <- merge_bal_terms(df.bal, balterms)
######## P belasting per bak
df.Pload <- loads_in_swt_meteotype(df.bal, f.subs=c("TotP"), f.meteotype = c(1,2,3,4))
write.table(df.Pload, paste(dir_output,scenario_name,"individueel_lozingen_P_meteotype.csv", sep = ""), row.names = FALSE, col.names = TRUE, sep = ";", quote = FALSE)
df.Pload.month <- loads_in_swt_month(df.bal, f.subs=c("TotP"))
write.table(df.Pload.month, paste(dir_output,scenario_name,"individueel_lozingen_P_maand.csv", sep = ""), row.names = FALSE, col.names = TRUE, sep = ";", quote = FALSE)
####### HRT per bak
# HRT Enkele bak
df.HRT.tabel <- hrt_swt_meteotype(df.bal,f.meteotype = c(1,2,3,4))
write.table(df.HRT.tabel, paste(dir_output,scenario_name,"individueel_HRT.csv", sep = ""), row.names = FALSE, col.names = TRUE, sep = ";", quote = FALSE)
df.HRT <- hrt_swt_month(df.bal,f.meteotype = c(1,2,3,4))
write.table(df.HRT, paste(dir_output,scenario_name,"individueel_HRT_maand.csv", sep = ""), row.names = FALSE, col.names = TRUE, sep = ";", quote = FALSE)
####### Meetpunt boezembak
map_locs_swt <- read_excel(fn_meetpunt_swt)
df.wq <- read.table(fn_wqmeas, header=T, sep=";")
# merge wq measurements, locs, periods:
head(df.wq)
head(df.Pload)
head(df.HRT)
library(Waternet)
library(Waternet)
library(Waternet)
library(Waternet)
library(Waternet)
library(Waternet)
library(Waternet)
library(Waternet)
library(Waternet)
library(Waternet)
library(Waternet)
library(Waternet)
library(Waternet)
library(Waternet)
df.HRT <- df %>%
filter(stof == "Continuity",
richting != "-") %>%
group_by(stof,meteotype_label,month,year,location, richting, volume_m3, tag) %>%
summarise(value = sum(value) / (365/12)) %>%
group_by(stof,meteotype_label,location, tag, richting,volume_m3 ) %>%
summarise(m3_dag = mean(value)/86400) %>%
spread(richting, m3_dag) %>%
mutate(HRT = round(volume_m3/In,2)) %>%
ungroup()
