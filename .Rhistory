library(Waternet)
hello
map2arr <- function (filename, timestamp = T, begintime = "1900-01-01 00:00:00"){
library("stringr")
if (toupper(substr(filename, nchar(filename) - 3, nchar(filename))) !=".MAP") {
stop("filename does not seem to be a <.his> file")
}
#filename = "d:/rundir/fr_huidig/delwaq.map"
zz <- file(filename, "rb")
readChar(zz, 40)
readChar(zz, 40)
readChar(zz, 40)
readChar(zz, 4)
timeorigin <- readChar(zz, 19)
readChar(zz, 7)
scu.prep <- readChar(zz, 8)
scu  <- as.numeric(scu.prep) # check for the internal timer
sign.scu <- sign(scu)  # sign can be +1, 0 or -1
ifelse(is.na(sign.scu), dec.sign.scu <- NA,   # NB. no error handling here yet, NA should only occur if timestamp = F and then you don't need dec.sign.scu
ifelse(sign.scu == 1 , dec.sign.scu <- "*",
ifelse(sign.scu == -1, dec.sign.scu <- "/",
ifelse(sign.scu == 0, stop("The sign of your internal timer is neither negative nor positive, but 0."), stop("Check dec.sign.scu.")))))
scu.sym  <- readChar(zz, 1)
readChar(zz, 1)
afm <- readBin(zz, integer(), n = 2)
syname <- vector("character", afm[1])
idump <- seq(1:afm[2])
for (i in 1:afm[1]) {
syname[i] <- readChar(zz, 20)
}
loc <- seek(zz)
it <- -1
itn <- vector("integer", 0)
tel <- 0
while (length(it) > 0) {
tel <- tel + 1
it <- readBin(zz, integer(), n = 1)
if (length(it) > 0) {
itn <- c(itn, it)
conc <- readBin(zz, "double", n = afm[1] * afm[2],
size = 4)
length(conc)
}
}
seek(zz, where = loc)
concar <- array(dim = c(length(itn), afm[2], afm[1]))
for (i in 1:length(itn)) {
it <- readBin(zz, integer(), n = 1)
concar[i, , ] <- matrix(readBin(zz, "double", n = afm[1] * afm[2], size = 4), nrow = afm[2], ncol = afm[1], byrow = T)
}
close(zz)
timeorigin <- str_replace_all(timeorigin, "[.]", "-")
ifelse(timestamp, itn2 <- as.character(as.POSIXct(x = sapply(itn, function(x) as.numeric(eval(parse(text = paste(x, dec.sign.scu, scu))))),
origin = timeorigin, tz = "GMT")), itn2 <- as.character(as.POSIXct(x = as.character(as.POSIXct(x = as.numeric(itn),
origin = begintime, tz = "GMT")))))
dimnames(concar) <- list(itn2, str_trim(idump), str_trim(syname))
return(concar)
}
library(Waternet)
library(devtools)
install_github("EMMeijers/Waternet")
library(Waternet)
install.packages("roxygen2")
library(Waternet)
filename <- "c:/rundir/Huidig/Run_65_baseline/delwaq.his"
library("stringr")
if (toupper(substr(filename, nchar(filename) - 3, nchar(filename))) !=".HIS") {
stop("filename does not seem to be a <.his> file")
}
zz <- file(filename, "rb")
readChar(zz, 40)
readChar(zz, 40)
readChar(zz, 40)
readChar(zz, 4)
timeorigin <- readChar(zz, 19)
readChar(zz, 7)
scu.prep <- readChar(zz, 8)
scu  <- as.numeric(scu.prep) # check for the internal timer
sign.scu <- sign(scu)  # sign can be +1, 0 or -1
zz
ifelse(is.na(sign.scu), dec.sign.scu <- NA,   # NB. no error handling here yet, NA should only occur if timestamp = F and then you don't need dec.sign.scu
ifelse(sign.scu == 1 , dec.sign.scu <- "*",
ifelse(sign.scu == -1, dec.sign.scu <- "/",
ifelse(sign.scu == 0, stop("The sign of your internal timer is neither negative nor positive, but 0."), stop("Check dec.sign.scu.")))))
scu.sym  <- readChar(zz, 1)
readChar(zz, 1)
afm <- readBin(zz, integer(), n = 2)
syname <- vector("character", afm[1])
idump <- vector("integer", afm[2])
duname <- vector("integer", afm[2])
for (i in 1:afm[1]) {
syname[i] <- readChar(zz, 20)
}
for (i in 1:afm[2]) {
idump[i] <- readBin(zz, integer(), n = 1)
duname[i] <- readChar(zz, 20)
}
loc <- seek(zz)
loc
it <- -1
itn <- vector("integer", 0)
tel <- 0
while (length(it) > 0) {
tel <- tel + 1
it <- readBin(zz, integer(), n = 1)
if (length(it) > 0) {
itn <- c(itn, it)
conc <- readBin(zz, "double", n = afm[1] * afm[2],
size = 4)
length(conc)
}
}
seek(zz, where = loc)
concar <- array(dim = c(length(itn), afm[2], afm[1]))
for (i in 1:length(itn)) {
it <- readBin(zz, integer(), n = 1)
concar[i, , ] <- matrix(readBin(zz, "double", n = afm[1] * afm[2], size = 4), nrow = afm[2], ncol = afm[1], byrow = T)
}
close(zz)
timeorigin <- str_replace_all(timeorigin, "[.]", "-")
filename <- "c:/rundir/Huidig/Run_65_baseline/delwaq.his"
library("stringr")
if (toupper(substr(filename, nchar(filename) - 3, nchar(filename))) %in% c(".HIS", ".MAP")) {
stop("filename does not seem to be a <.his> of <.map> file")
}
toupper(substr(filename, nchar(filename) - 3, nchar(filename))
)
fn.ext <- toupper(substr(filename, nchar(filename) - 3, nchar(filename)))
filename <- "c:/rundir/Huidig/Run_65_baseline/delwaq.his"
fn.ext <- toupper(substr(filename, nchar(filename) - 3, nchar(filename)))
library("stringr")
if (!ext %in% c(".HIS", ".MAP")) {
stop("filename does not seem to be a <.his> of <.map> file")
}
ifelse (ext %in% c(".HIS", ".MAP"), , stop("filename does not seem to be a <.his> of <.map> file"))
ifelse (fn.ext %in% c(".HIS", ".MAP"), , stop("filename does not seem to be a <.his> of <.map> file"))
ifelse (fn.ext %in% c(".HIS", ".MAP"),"", stop("filename does not seem to be a <.his> of <.map> file"))
filename <- "c:/rundir/Huidig/Run_65_baseline/delwaq.him"
fn.ext <- toupper(substr(filename, nchar(filename) - 3, nchar(filename)))
library("stringr")
ifelse (fn.ext %in% c(".HIS", ".MAP"),"", stop("filename does not seem to be a <.his> of <.map> file"))
`%not_in%` <- Negate(`%in%`)
`%not_in%` <- Negate(`%in%`)
filename <- "c:/rundir/Huidig/Run_65_baseline/delwaq.his"
fn.ext <- toupper(substr(filename, nchar(filename) - 3, nchar(filename)))
`%not_in%` <- Negate(`%in%`)
library("stringr")
if (fn.ext %not_in% c(".HIS", ".MAP")) {
stop("filename does not seem to be a <.his> of <.map> file")
}
filename <- "c:/rundir/Huidig/Run_65_baseline/delwaq.hip"
fn.ext <- toupper(substr(filename, nchar(filename) - 3, nchar(filename)))
`%not_in%` <- Negate(`%in%`)
library("stringr")
if (fn.ext %not_in% c(".HIS", ".MAP")) {
stop("filename does not seem to be a <.his> of <.map> file")
}
filename <- "c:/rundir/Huidig/Run_65_baseline/delwaq.map"
`%not_in%` <- Negate(`%in%`)
library("stringr")
if (toupper(substr(filename, nchar(filename) - 3, nchar(filename))) %not_in% c(".HIS", ".MAP")) {
stop("filename does not seem to be a <.his> of <.map> file")
}
zz <- file(filename, "rb")
readChar(zz, 40)
readChar(zz, 40)
readChar(zz, 40)
readChar(zz, 4)
timeorigin <- readChar(zz, 19)
readChar(zz, 7)
scu.prep <- readChar(zz, 8)
scu  <- as.numeric(scu.prep) # check for the internal timer
sign.scu <- sign(scu)  # sign can be +1, 0 or -1
ifelse(is.na(sign.scu), dec.sign.scu <- NA,   # NB. no error handling here yet, NA should only occur if timestamp = F and then you don't need dec.sign.scu
ifelse(sign.scu == 1 , dec.sign.scu <- "*",
ifelse(sign.scu == -1, dec.sign.scu <- "/",
ifelse(sign.scu == 0, stop("The sign of your internal timer is neither negative nor positive, but 0."), stop("Check dec.sign.scu.")))))
scu.sym  <- readChar(zz, 1)
readChar(zz, 1)
afm <- readBin(zz, integer(), n = 2)
syname <- vector("character", afm[1])
idump <- vector("integer", afm[2])
duname <- vector("integer", afm[2])
for (i in 1:afm[1]) {
syname[i] <- readChar(zz, 20)
}
syname
for (i in 1:afm[2]) {
idump[i] <- readBin(zz, integer(), n = 1)
duname[i] <- readChar(zz, 20)
}
duname
filename <- "c:/rundir/Huidig/Run_65_baseline/delwaq.his"
`%not_in%` <- Negate(`%in%`)
library("stringr")
if (toupper(substr(filename, nchar(filename) - 3, nchar(filename))) %not_in% c(".HIS", ".MAP")) {
stop("filename does not seem to be a <.his> of <.map> file")
}
zz <- file(filename, "rb")
readChar(zz, 40)
readChar(zz, 40)
readChar(zz, 40)
readChar(zz, 4)
timeorigin <- readChar(zz, 19)
readChar(zz, 7)
scu.prep <- readChar(zz, 8)
scu  <- as.numeric(scu.prep) # check for the internal timer
sign.scu <- sign(scu)  # sign can be +1, 0 or -1
ifelse(is.na(sign.scu), dec.sign.scu <- NA,   # NB. no error handling here yet, NA should only occur if timestamp = F and then you don't need dec.sign.scu
ifelse(sign.scu == 1 , dec.sign.scu <- "*",
ifelse(sign.scu == -1, dec.sign.scu <- "/",
ifelse(sign.scu == 0, stop("The sign of your internal timer is neither negative nor positive, but 0."), stop("Check dec.sign.scu.")))))
scu.sym  <- readChar(zz, 1)
readChar(zz, 1)
afm <- readBin(zz, integer(), n = 2)
syname <- vector("character", afm[1])
idump <- vector("integer", afm[2])
duname <- vector("integer", afm[2])
for (i in 1:afm[1]) {
syname[i] <- readChar(zz, 20)
}
for (i in 1:afm[2]) {
idump[i] <- readBin(zz, integer(), n = 1)
duname[i] <- readChar(zz, 20)
}
duname
filename <- "c:/rundir/Huidig/Run_65_baseline/delwaq.his"
`%not_in%` <- Negate(`%in%`)
fn.ext <- toupper(substr(filename, nchar(filename) - 3, nchar(filename)))
delwaq2arr <- function (filename, timestamp = T, begintime = "1900-01-01 00:00:00"){
filename <- "c:/rundir/Huidig/Run_65_baseline/delwaq.his"
`%not_in%` <- Negate(`%in%`)
fn.ext <- toupper(substr(filename, nchar(filename) - 3, nchar(filename)))
library("stringr")
if (fn.ext %not_in% c(".HIS", ".MAP")) {
stop("filename does not seem to be a <.his> of <.map> file")
}
zz <- file(filename, "rb")
readChar(zz, 40)
readChar(zz, 40)
readChar(zz, 40)
readChar(zz, 4)
timeorigin <- readChar(zz, 19)
readChar(zz, 7)
scu.prep <- readChar(zz, 8)
scu  <- as.numeric(scu.prep) # check for the internal timer
sign.scu <- sign(scu)  # sign can be +1, 0 or -1
ifelse(is.na(sign.scu), dec.sign.scu <- NA,   # NB. no error handling here yet, NA should only occur if timestamp = F and then you don't need dec.sign.scu
ifelse(sign.scu == 1 , dec.sign.scu <- "*",
ifelse(sign.scu == -1, dec.sign.scu <- "/",
ifelse(sign.scu == 0, stop("The sign of your internal timer is neither negative nor positive, but 0."), stop("Check dec.sign.scu.")))))
scu.sym  <- readChar(zz, 1)
readChar(zz, 1)
afm <- readBin(zz, integer(), n = 2)
syname <- vector("character", afm[1])
for (i in 1:afm[1]) {
syname[i] <- readChar(zz, 20)
}
# Read locations names, different handling of <.HIS> and <.MAP> file:
if (fn.ext == ".HIS") {
idump <- vector("integer", afm[2])
duname <- vector("integer", afm[2])
for (i in 1:afm[2]) {
idump[i] <- readBin(zz, integer(), n = 1)
duname[i] <- readChar(zz, 20)
}
} else {
idump <- seq(1:afm[2])
}
loc <- seek(zz)
it <- -1
itn <- vector("integer", 0)
tel <- 0
while (length(it) > 0) {
tel <- tel + 1
it <- readBin(zz, integer(), n = 1)
if (length(it) > 0) {
itn <- c(itn, it)
conc <- readBin(zz, "double", n = afm[1] * afm[2],
size = 4)
length(conc)
}
}
seek(zz, where = loc)
concar <- array(dim = c(length(itn), afm[2], afm[1]))
for (i in 1:length(itn)) {
it <- readBin(zz, integer(), n = 1)
concar[i, , ] <- matrix(readBin(zz, "double", n = afm[1] * afm[2], size = 4), nrow = afm[2], ncol = afm[1], byrow = T)
}
close(zz)
timeorigin <- str_replace_all(timeorigin, "[.]", "-")
ifelse(timestamp, itn2 <- as.character(as.POSIXct(x = sapply(itn, function(x) as.numeric(eval(parse(text = paste(x, dec.sign.scu, scu))))),
origin = timeorigin, tz = "GMT")), itn2 <- as.character(as.POSIXct(x = as.character(as.POSIXct(x = as.numeric(itn),
origin = begintime, tz = "GMT")))))
if (fn.ext == ".HIS") {
dimnames(concar) <- list(itn2, str_trim(duname), str_trim(syname))
} else {
dimnames(concar) <- list(itn2, str_trim(idump), str_trim(syname))
}
return(concar)
}
delwaq2arr <- function (filename, timestamp = T, begintime = "1900-01-01 00:00:00"){
`%not_in%` <- Negate(`%in%`)
fn.ext <- toupper(substr(filename, nchar(filename) - 3, nchar(filename)))
library("stringr")
if (fn.ext %not_in% c(".HIS", ".MAP")) {
stop("filename does not seem to be a <.his> of <.map> file")
}
zz <- file(filename, "rb")
readChar(zz, 40)
readChar(zz, 40)
readChar(zz, 40)
readChar(zz, 4)
timeorigin <- readChar(zz, 19)
readChar(zz, 7)
scu.prep <- readChar(zz, 8)
scu  <- as.numeric(scu.prep) # check for the internal timer
sign.scu <- sign(scu)  # sign can be +1, 0 or -1
ifelse(is.na(sign.scu), dec.sign.scu <- NA,   # NB. no error handling here yet, NA should only occur if timestamp = F and then you don't need dec.sign.scu
ifelse(sign.scu == 1 , dec.sign.scu <- "*",
ifelse(sign.scu == -1, dec.sign.scu <- "/",
ifelse(sign.scu == 0, stop("The sign of your internal timer is neither negative nor positive, but 0."), stop("Check dec.sign.scu.")))))
scu.sym  <- readChar(zz, 1)
readChar(zz, 1)
afm <- readBin(zz, integer(), n = 2)
syname <- vector("character", afm[1])
for (i in 1:afm[1]) {
syname[i] <- readChar(zz, 20)
}
# Read locations names, different handling of <.HIS> and <.MAP> file:
if (fn.ext == ".HIS") {
idump <- vector("integer", afm[2])
duname <- vector("integer", afm[2])
for (i in 1:afm[2]) {
idump[i] <- readBin(zz, integer(), n = 1)
duname[i] <- readChar(zz, 20)
}
} else {
idump <- seq(1:afm[2])
}
loc <- seek(zz)
it <- -1
itn <- vector("integer", 0)
tel <- 0
while (length(it) > 0) {
tel <- tel + 1
it <- readBin(zz, integer(), n = 1)
if (length(it) > 0) {
itn <- c(itn, it)
conc <- readBin(zz, "double", n = afm[1] * afm[2],
size = 4)
length(conc)
}
}
seek(zz, where = loc)
concar <- array(dim = c(length(itn), afm[2], afm[1]))
for (i in 1:length(itn)) {
it <- readBin(zz, integer(), n = 1)
concar[i, , ] <- matrix(readBin(zz, "double", n = afm[1] * afm[2], size = 4), nrow = afm[2], ncol = afm[1], byrow = T)
}
close(zz)
timeorigin <- str_replace_all(timeorigin, "[.]", "-")
ifelse(timestamp, itn2 <- as.character(as.POSIXct(x = sapply(itn, function(x) as.numeric(eval(parse(text = paste(x, dec.sign.scu, scu))))),
origin = timeorigin, tz = "GMT")), itn2 <- as.character(as.POSIXct(x = as.character(as.POSIXct(x = as.numeric(itn),
origin = begintime, tz = "GMT")))))
if (fn.ext == ".HIS") {
dimnames(concar) <- list(itn2, str_trim(duname), str_trim(syname))
} else {
dimnames(concar) <- list(itn2, str_trim(idump), str_trim(syname))
}
return(concar)
}
# test
fn.his <- "c:/rundir/Huidig/Run_65_baseline/delwaq.his"
fn.map <- "c:/rundir/Huidig/Run_65_baseline/delwaq.map"
data <- delwaq2arr(fn.his)
data.his <- delwaq2arr(fn.his)
data.map <- delwaq2arr(fn.map)
library(Waternet)
library(Waternet)
library(Waternet)
library(Waternet)
install.packages(Waternet)
library(devtools)
install_github("EMMeijers/Waternet")
library(Waternet)
??delwaq2
??delwaq2arr
library(Waternet)
arr <- delwaq2arr(filename = "DATA/testdata.his")
dimnames(arr)
submod <- c("OXY", "Cl")
locmod <- c("LOX003", "LOX005", "LOX007", "LOX009")
df <- arr2df(arr, locmod=locmod, submod=submod)
# converts array to dataframe
arr2df <- function(arr, locmod, submod) {
require(reshape2)
if(length(submod) != 1 & length(locmod) != 1) {
df.mod <- melt(arr[, locmod, submod], varnames=c("time", "location", "variable"))
}
if(length(submod) == 1 & length(locmod) != 1) {
df.mod <- melt(arr[, locmod, submod], varnames=c("time", "location"))
df.mod$variable <- submod
}
if(length(locmod) == 1 & length(submod) != 1) {
df.mod <- melt(arr[, locmod, submod], varnames=c("time", "variable"))
df.mod$location <- locmod
}
if(length(locmod) == 1 & length(submod) == 1) {
df.mod <- melt(arr[, locmod, submod], varnames=c("time"))
df.mod$location <- locmod
df.mod$variable <- submod
df.mod$time <- row.names(df.mod)
}
ifelse(nchar(as.character(df.mod$time[1])) < 19,
df.mod$time  <- as.POSIXct(x=df.mod$time, format = "%Y-%m-%d"),
df.mod$time  <- as.POSIXct(x=df.mod$time, format = "%Y-%m-%d %H:%M:%S")
)
df.mod$location  <- factor(df.mod$location,levels = locmod)
#df.mod$species   <- factor(df.mod$species, levels = submod)
return(df.mod)
}
library(Waternet)
arr <- delwaq2arr(filename = "DATA/testdata.his")
dimnames(arr)
submod <- c("OXY", "Cl")
locmod <- c("LOX003", "LOX005", "LOX007", "LOX009")
df <- arr2df(arr, locmod=locmod, submod=submod)
library(ggplot2)
plot <- ggplot(df, aes(time, value))
plot +
geom_line(aes(color = variable), size = 1) +
geom_point(aes(color = variable), fill = "white",  shape = 21, size = 4) +
facet_grid((. ~ location))
}
library(Waternet)
arr <- delwaq2arr(filename = "DATA/testdata.his")
dimnames(arr)
submod <- c("OXY", "Cl")
locmod <- c("LOX003", "LOX005", "LOX007", "LOX009")
df <- arr2df(arr, locmod=locmod, submod=submod)
library(ggplot2)
plot <- ggplot(df, aes(time, value)) +
geom_line(aes(color = variable), size = 1) +
geom_point(aes(color = variable), fill = "white",  shape = 21, size = 4) +
facet_grid((variable ~ location))
plot
plot <- ggplot(df, aes(time, value)) +
geom_line(aes(color = variable), size = 1) +
facet_grid((variable ~ location), scales = "free")
plot
library(Waternet)
get_data_locs(arr)
library(Waternet)
